"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));

var CanceledError =
/*#__PURE__*/
function (_Error) {
  (0, _inherits2.default)(CanceledError, _Error);

  function CanceledError() {
    var _this;

    (0, _classCallCheck2.default)(this, CanceledError);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CanceledError).call(this, 'throttled invocation was canceled'));
    _this.name = 'CanceledError';
    return _this;
  }

  return CanceledError;
}((0, _wrapNativeSuper2.default)(Error));

var Delay =
/*#__PURE__*/
function () {
  function Delay(lastInvocationDone, wait) {
    var _this2 = this;

    (0, _classCallCheck2.default)(this, Delay);
    this.effect = new Promise(function (resolve) {
      return _this2.timeout = setTimeout(resolve, wait);
    });
    this.ready = lastInvocationDone.then(function () {
      return _this2.effect;
    });
  }

  (0, _createClass2.default)(Delay, [{
    key: "flush",
    value: function flush() {
      clearTimeout(this.timeout);
      this.effect = undefined;
    }
  }, {
    key: "cancel",
    value: function cancel() {
      clearTimeout(this.timeout);
      this.effect = Promise.reject(new CanceledError());
      this.effect.catch(function () {});
    }
  }]);
  return Delay;
}();

function throttle(fn, _wait) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var wait = _wait != null && Number.isFinite(_wait) ? Math.max(_wait, 0) : 0;

  var getNextArgs = options.getNextArgs || function (prev, next) {
    return next;
  };

  var nextArgs;
  var lastInvocationDone = Promise.resolve();
  var delay = new Delay(lastInvocationDone, 0);
  var nextInvocation = null;

  function invoke() {
    var args = nextArgs; // istanbul ignore next

    if (!args) throw new Error('unexpected error: nextArgs is null');
    nextInvocation = null;
    nextArgs = null;
    var result;

    try {
      result = Promise.resolve(fn.apply(void 0, (0, _toConsumableArray2.default)(args)));
    } catch (error) {
      result = Promise.reject(error);
    }

    lastInvocationDone = result.catch(function () {});
    delay = new Delay(lastInvocationDone, wait);
    return result;
  }

  function wrapper() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    nextArgs = nextArgs ? getNextArgs(nextArgs, args) : args;
    if (!nextArgs) throw new Error('unexpected error: nextArgs is null');
    if (!nextInvocation) nextInvocation = delay.ready.then(invoke);
    return nextInvocation;
  }

  wrapper.cancel =
  /*#__PURE__*/
  (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee() {
    var _lastInvocationDone;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _lastInvocationDone = lastInvocationDone;
            delay.cancel();
            nextInvocation = null;
            nextArgs = null;
            lastInvocationDone = Promise.resolve();
            delay = new Delay(lastInvocationDone, 0);
            _context.next = 8;
            return _lastInvocationDone;

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  wrapper.flush =
  /*#__PURE__*/
  (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee2() {
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            delay.flush();
            _context2.next = 3;
            return lastInvocationDone;

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return wrapper;
}

;
throttle.CanceledError = CanceledError;
module.exports = throttle;
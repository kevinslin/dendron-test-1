"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runEngineTestV5 = void 0;
const common_server_1 = require("@dendronhq/common-server");
const common_test_utils_1 = require("@dendronhq/common-test-utils");
const engine_server_1 = require("@dendronhq/engine-server");
const lodash_1 = __importDefault(require("lodash"));
async function setupWS(opts) {
    const wsRoot = common_server_1.tmpDir().name;
    const defaultVaults = (opts === null || opts === void 0 ? void 0 : opts.singleVault) ? ["vault1"] : ["vault1", "vault2"];
    const ws = new engine_server_1.WorkspaceService({ wsRoot });
    const vaults = await Promise.all(defaultVaults.map(async (fsPath) => {
        const vault = { fsPath };
        await ws.createVault({ vault });
        return vault;
    }));
    return { wsRoot, vaults };
}
async function runEngineTestV5(func, opts) {
    const { preSetupHook, extra, singleVault, createEngine } = lodash_1.default.defaults(opts, {
        preSetupHook: async ({}) => { },
        postSetupHook: async ({}) => { },
        createEngine: engine_server_1.createEngine,
        extra: {},
    });
    const { wsRoot, vaults } = await setupWS({ singleVault });
    await preSetupHook({ wsRoot, vaults });
    const engine = createEngine({ wsRoot, vaults });
    const initResp = await engine.init();
    const testOpts = { wsRoot, vaults, engine, initResp, extra };
    if (opts.setupOnly) {
        return testOpts;
    }
    const results = (await func(testOpts)) || [];
    await common_test_utils_1.runJestHarnessV2(results, expect);
    return { opts: testOpts, resp: undefined };
}
exports.runEngineTestV5 = runEngineTestV5;
//# sourceMappingURL=engine.js.map
/// <reference types="node" />
import { DendronConfig, DEngineClientV2 } from "@dendronhq/common-all";
import { DLogger } from "@dendronhq/common-server";
import { FSWatcher } from "fs-extra";
import { DendronEngineClient } from "../engineClient";
export declare type EngineConnectorInitOpts = {
    onReady?: ({}: {
        ws: EngineConnector;
    }) => Promise<void>;
    numRetries?: number;
    portOverride?: number;
};
export declare class EngineConnector {
    wsRoot: string;
    _engine: DEngineClientV2 | undefined;
    port: number | undefined;
    onReady?: ({ ws }: {
        ws: EngineConnector;
    }) => Promise<void>;
    serverPortWatcher?: FSWatcher;
    initialized: boolean;
    config: DendronConfig;
    logger?: DLogger;
    static _ENGINE_CONNECTOR: EngineConnector | undefined;
    static instance(): EngineConnector;
    static getOrCreate({ wsRoot, logger }: {
        wsRoot: string;
        logger?: DLogger;
    }): EngineConnector;
    constructor({ wsRoot, logger }: {
        wsRoot: string;
        logger?: DLogger;
    });
    get vaults(): string[];
    init(opts?: EngineConnectorInitOpts): Promise<void>;
    initEngine({ port }: {
        port: number;
    }): Promise<DendronEngineClient>;
    get engine(): DEngineClientV2;
    createServerWatcher(opts?: {
        numRetries?: number;
    }): Promise<void>;
    onChangePort({ port }: {
        port: number;
    }): Promise<void>;
}

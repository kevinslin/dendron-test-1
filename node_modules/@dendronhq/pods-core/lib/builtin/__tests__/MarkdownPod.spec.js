"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_test_utils_1 = require("@dendronhq/common-test-utils");
const engine_server_1 = require("@dendronhq/engine-server");
const MarkdownPod_1 = require("../MarkdownPod");
const engine_test_utils_1 = require("@dendronhq/engine-test-utils");
const common_all_1 = require("@dendronhq/common-all");
const createEngine = (opts) => {
    return engine_server_1.DendronEngineV2.createV3(opts);
};
describe("MarkdownImport Pod", () => {
    const { ROOT_WITH_MULT_FOLDERS, SPECIAL_CHARS, CONVERT_LINKS, } = common_test_utils_1.PODS_CORE.MARKDOWN.IMPORT;
    test("root with mult folders", async () => {
        await common_test_utils_1.runEngineTestV4(ROOT_WITH_MULT_FOLDERS.testFunc, {
            expect,
            createEngine,
            preSetupHook: ROOT_WITH_MULT_FOLDERS.preSetupHook,
            extra: {
                pod: new MarkdownPod_1.MarkdownImportPod(),
            },
        });
    });
    test("root with special chars", async () => {
        await common_test_utils_1.runEngineTestV4(SPECIAL_CHARS.testFunc, {
            expect,
            createEngine,
            preSetupHook: SPECIAL_CHARS.preSetupHook,
            extra: {
                pod: new MarkdownPod_1.MarkdownImportPod(),
            },
        });
    });
    test("root with special chars", async () => {
        await common_test_utils_1.runEngineTestV4(CONVERT_LINKS.testFunc, {
            expect,
            createEngine,
            preSetupHook: CONVERT_LINKS.preSetupHook,
            extra: {
                pod: new MarkdownPod_1.MarkdownImportPod(),
            },
        });
    });
});
describe("MarkdownPublishPod", () => {
    test("basic", async () => {
        await engine_test_utils_1.runEngineTestV5(async ({ engine, wsRoot, vaults }) => {
            const fname = "foo";
            const vault = vaults[0];
            const vaultName = common_all_1.VaultUtils.getName(vault);
            const resp = await new MarkdownPod_1.MarkdownPublishPod().execute({
                engine,
                vaults,
                wsRoot,
                config: {
                    fname,
                    vault: vaultName,
                    dest: "stdout",
                },
            });
            expect(resp).toEqual("foo body");
        }, {
            expect,
            preSetupHook: common_test_utils_1.ENGINE_HOOKS.setupBasic,
        });
    });
});
//# sourceMappingURL=MarkdownPod.spec.js.map
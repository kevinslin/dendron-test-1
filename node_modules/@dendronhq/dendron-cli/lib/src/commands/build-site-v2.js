"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildSiteV2CLICommand = void 0;
const common_server_1 = require("@dendronhq/common-server");
const engine_server_1 = require("@dendronhq/engine-server");
const fs_extra_1 = __importDefault(require("fs-extra"));
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const base_1 = require("./base");
const utils_1 = require("./utils");
class BuildSiteV2CLICommand extends base_1.CLICommand {
    constructor() {
        super({
            name: "buildSiteV2",
            desc: "build notes for publication using 11ty",
        });
    }
    buildArgs(args) {
        super.buildArgs(args);
        utils_1.setupEngineArgs(args);
        args.option("serve", {
            describe: "serve over local http server",
            default: false,
            type: "boolean",
        });
        args.option("stage", {
            describe: "serve over local http server",
            default: "dev",
            choices: ["dev", "prod"],
        });
        args.option("servePort", {
            describe: "port to serve over",
            default: "8080",
        });
        args.option("output", {
            describe: "if set, override output from config.yml",
            type: "string",
        });
    }
    async enrichArgs(args) {
        const engineArgs = await utils_1.setupEngine(args);
        this.L.info({ msg: `connecting to engine on port: ${engineArgs.port}` });
        // add site specific notes
        if (args.enginePort) {
            const siteNotes = engine_server_1.SiteUtils.addSiteOnlyNotes({
                engine: engineArgs.engine,
            });
            lodash_1.default.forEach(siteNotes, (ent) => {
                engineArgs.engine.notes[ent.id] = ent;
            });
        }
        return { ...args, ...engineArgs };
    }
    async execute(opts) {
        let nmPath = common_server_1.goUpTo(__dirname, "node_modules");
        let { wsRoot, port, stage, servePort, output } = lodash_1.default.defaults(opts, {});
        let cwd = opts.cwd;
        if (!cwd) {
            cwd = path_1.default.join(nmPath, "node_modules", "@dendronhq", "dendron-11ty");
            // fix for /home/runner/work/dendron-site/dendron-site/node_modules/@dendronhq/dendron-cli/node_modules/@dendronhq/dendron-11ty'
            if (!fs_extra_1.default.existsSync(cwd)) {
                nmPath = common_server_1.goUpTo(path_1.default.join(nmPath, ".."), "node_modules");
                cwd = path_1.default.join(nmPath, "node_modules", "@dendronhq", "dendron-11ty");
            }
        }
        process.env["ENGINE_PORT"] = lodash_1.default.toString(port);
        process.env["WS_ROOT"] = wsRoot;
        process.env["STAGE"] = stage;
        process.env["ELEV_PORT"] = lodash_1.default.toString(servePort);
        if (output) {
            process.env["OUTPUT"] = output;
        }
        const { compile } = require("@dendronhq/dendron-11ty");
        await compile({ cwd }, { serve: opts.serve, port: servePort });
        if (!opts.serve) {
            // hack, give postBuild a chance to complete
            setTimeout(() => {
                process.exit();
            }, 5000);
        }
        return {};
    }
}
exports.BuildSiteV2CLICommand = BuildSiteV2CLICommand;
//# sourceMappingURL=build-site-v2.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupEngineArgs = exports.setupEngine = void 0;
const common_server_1 = require("@dendronhq/common-server");
const engine_server_1 = require("@dendronhq/engine-server");
const launchEngineServer_1 = require("./launchEngineServer");
const lodash_1 = __importDefault(require("lodash"));
const logger = common_server_1.createLogger();
async function setupEngine(opts) {
    let { wsRoot, enginePort, init } = lodash_1.default.defaults(opts, { init: true });
    let engine;
    let port;
    wsRoot = common_server_1.resolvePath(wsRoot, process.cwd());
    if (enginePort) {
        logger.info({
            ctx: "setupEngine",
            msg: "connecting to engine",
            enginePort,
        });
        const engineConnector = engine_server_1.EngineConnector.getOrCreate({
            wsRoot,
        });
        await engineConnector.init({ portOverride: enginePort });
        engine = engineConnector.engine;
        port = enginePort;
    }
    else {
        logger.info({ ctx: "setupEngine", msg: "initialize new engine" });
        ({ engine, port } = await new launchEngineServer_1.LaunchEngineServerCommand().enrichArgs(opts));
        if (init) {
            await engine.init();
        }
    }
    return { wsRoot, engine, port };
}
exports.setupEngine = setupEngine;
function setupEngineArgs(args) {
    args.option("enginePort", {
        describe: "If set, connecto to running engine. If not set, create new instance of Dendron Engine",
    });
}
exports.setupEngineArgs = setupEngineArgs;
//# sourceMappingURL=utils.js.map
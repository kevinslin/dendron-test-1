"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoteCLICommand = exports.NoteActions = void 0;
const lodash_1 = __importDefault(require("lodash"));
const base_1 = require("./base");
const utils_1 = require("./utils");
var NoteActions;
(function (NoteActions) {
    NoteActions["QUERY"] = "query";
})(NoteActions = exports.NoteActions || (exports.NoteActions = {}));
function constructFilters(filter) {
    console.log(filter);
    return [];
}
class NoteCLICommand extends base_1.CLICommand {
    constructor() {
        super({ name: "note", desc: "note related command" });
    }
    buildArgs(args) {
        super.buildArgs(args);
        utils_1.setupEngineArgs(args);
        args.option("action", {
            describe: "what action to perform on notes",
            type: "string",
            requiresArg: true,
            choices: Object.values(NoteActions),
        });
        args.option("query", {
            describe: "run doctor over a query",
            type: "string",
        });
        args.option("limit", {
            describe: "limit num changes",
            type: "number",
        });
        args.option("dryRun", {
            describe: "dry run",
            type: "boolean",
        });
        args.option("filter", {
            describe: "filter operations",
            type: "array",
        });
    }
    async enrichArgs(args) {
        const engineArgs = await utils_1.setupEngine(args);
        const filters = constructFilters(args.filter);
        return { ...args, ...engineArgs, filters };
    }
    async execute(opts) {
        const { action, engine, query } = lodash_1.default.defaults(opts, {
            limit: 99999,
            exit: true,
        });
        switch (action) {
            case NoteActions.QUERY: {
                let notes = query
                    ? engine.queryNotesSync({ qs: query }).data
                    : lodash_1.default.values(engine.notes);
                console.log(JSON.stringify(notes));
                break;
            }
        }
    }
}
exports.NoteCLICommand = NoteCLICommand;
//# sourceMappingURL=notes.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VaultUtils = void 0;
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const error_1 = require("./error");
class VaultUtils {
    static getName(vault) {
        return vault.name || path_1.default.basename(vault.fsPath);
    }
    static isEqual(vaultSrc, vaultCmp, wsRoot) {
        if (lodash_1.default.isString(vaultSrc)) {
            vaultSrc = { fsPath: vaultSrc };
        }
        if (lodash_1.default.isString(vaultCmp)) {
            vaultCmp = { fsPath: vaultCmp };
        }
        return (this.normVaultPath({ vault: vaultSrc, wsRoot }) ===
            this.normVaultPath({ vault: vaultCmp, wsRoot }));
    }
    static getByVaultPath({ wsRoot, vaults, vaultPath, }) {
        // get diname
        const vault = lodash_1.default.find(vaults, (ent) => {
            let cmp = path_1.default.isAbsolute(vaultPath)
                ? path_1.default.relative(wsRoot, vaultPath)
                : vaultPath;
            return ent.fsPath === cmp;
        });
        if (!vault) {
            throw new error_1.DendronError({ msg: "no vault found" });
        }
        return vault;
    }
    static getVaultByNotePathV4({ vaults, wsRoot, fsPath, }) {
        const normPath = this.normPathByWsRoot({
            wsRoot,
            fsPath: path_1.default.dirname(fsPath),
        });
        const vault = lodash_1.default.find(vaults, { fsPath: normPath });
        if (!vault) {
            throw new error_1.DendronError({ msg: "no vault found" });
        }
        return vault;
    }
}
exports.VaultUtils = VaultUtils;
VaultUtils.matchVault = (opts) => {
    const { vault, vaults, wsRoot } = opts;
    const maybeMatch = lodash_1.default.filter(vaults, (v) => {
        return VaultUtils.isEqual(v, vault, wsRoot);
    });
    if (maybeMatch.length === 1) {
        return maybeMatch[0];
    }
    else {
        return false;
    }
};
/**
 * Vault path relative to root
 */
VaultUtils.normVaultPath = (opts) => {
    return path_1.default.isAbsolute(opts.vault.fsPath)
        ? path_1.default.relative(opts.wsRoot, opts.vault.fsPath)
        : opts.vault.fsPath;
};
VaultUtils.normPathByWsRoot = (opts) => {
    return path_1.default.relative(opts.wsRoot, opts.fsPath);
};
//# sourceMappingURL=vault.js.map
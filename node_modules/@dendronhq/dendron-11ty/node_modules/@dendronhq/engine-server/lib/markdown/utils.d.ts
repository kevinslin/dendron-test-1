import { DendronError, DendronSiteConfig, DEngineClientV2, DVault, getSlugger } from "@dendronhq/common-all";
import remark from "remark";
import { default as unified, default as Unified, Processor } from "unified";
import { Node, Parent } from "unist";
import { DendronPubOpts } from "./remark/dendronPub";
import { NoteRefsOpts } from "./remark/noteRefs";
import { WikiLinksOpts } from "./remark/wikiLinks";
import { DendronASTData, DendronASTDest } from "./types";
declare type ProcOpts = {
    engine: DEngineClientV2;
};
export declare class MDUtilsV4 {
    static findIndex(array: Node[], fn: any): number;
    static genMDMsg(msg: string): Parent;
    static getDendronData(proc: Processor): DendronASTData;
    static setDendronData(proc: Processor, data: Partial<DendronASTData>): unified.Processor<unified.Settings>;
    static getEngineFromProc(proc: Unified.Processor): {
        error: DendronError | undefined;
        engine: Pick<import("@dendronhq/common-all").DEngineV2, "notes" | "wsRoot" | "schemas" | "configRoot" | "vaultsv3" | "links" | "updateNote" | "updateSchema" | "writeNote" | "writeSchema" | "init" | "deleteNote" | "deleteSchema" | "sync" | "getNoteByPath" | "getSchema" | "querySchema" | "queryNotes" | "queryNotesSync" | "renameNote" | "writeConfig" | "getConfig">;
    };
    static getNoteRefLvl(proc: Unified.Processor): number;
    static setNoteRefLvl(proc: Unified.Processor, lvl: number): unified.Processor<unified.Settings>;
    static isHeading(node: Node, text: string, depth?: number): boolean;
    static matchHeading(node: Node, text: string, opts: {
        depth?: number;
        slugger: ReturnType<typeof getSlugger>;
    }): boolean;
    static remark(): unified.Processor<remark.PartialRemarkOptions>;
    static proc(opts: ProcOpts): unified.Processor<remark.PartialRemarkOptions>;
    static procFull(opts: ProcOpts & {
        dest: DendronASTDest;
        vault?: DVault;
        config?: DendronSiteConfig;
        fname?: string;
        wikiLinksOpts?: WikiLinksOpts;
        noteRefOpts?: NoteRefsOpts;
        publishOpts?: DendronPubOpts;
        mathOpts?: {
            katex?: boolean;
        };
    }): unified.Processor<remark.PartialRemarkOptions>;
    static procRemark(opts: {
        proc?: Processor;
    }): unified.Processor<unified.Settings>;
    static procRehype(opts: {
        proc?: Processor;
        mdPlugins?: Processor[];
        mathjax?: boolean;
    }): unified.Processor<unified.Settings>;
}
export {};

import { NotePropsV2, WorkspaceOpts } from "@dendronhq/common-all";
import { TestPresetEntryV4 } from "@dendronhq/common-test-utils";
import { DendronEngineV2 } from "../../../enginev2";
import { DendronASTDest, Processor } from "../../types";
export declare const basicSetup: ({ wsRoot, vaults }: WorkspaceOpts) => Promise<void>;
export declare const createEngine: ({ vaults, wsRoot }: WorkspaceOpts) => DendronEngineV2;
export declare const createProc: (opts: Parameters<TestPresetEntryV4["testFunc"]>[0], procOverride?: Partial<{
    engine: Pick<import("@dendronhq/common-all").DEngineV2, "notes" | "wsRoot" | "schemas" | "configRoot" | "vaultsv3" | "links" | "updateNote" | "updateSchema" | "writeNote" | "writeSchema" | "init" | "deleteNote" | "deleteSchema" | "sync" | "getNoteByPath" | "getSchema" | "querySchema" | "queryNotes" | "queryNotesSync" | "renameNote" | "writeConfig" | "getConfig">;
} & {
    dest: DendronASTDest;
    vault?: import("@dendronhq/common-all").DVault | undefined;
    config?: import("@dendronhq/common-all").DendronSiteConfig | undefined;
    fname?: string | undefined;
    wikiLinksOpts?: {
        convertObsidianLinks?: boolean | undefined;
        useId?: boolean | undefined;
        prefix?: string | undefined;
    } | undefined;
    noteRefOpts?: {
        prettyRefs?: boolean | undefined;
        wikiLinkOpts?: {
            convertObsidianLinks?: boolean | undefined;
            useId?: boolean | undefined;
            prefix?: string | undefined;
        } | undefined;
    } | undefined;
    publishOpts?: import("../dendronPub").DendronPubOpts | undefined;
    mathOpts?: {
        katex?: boolean | undefined;
    } | undefined;
}> | undefined) => Promise<Processor<import("remark").PartialRemarkOptions>>;
export declare const createProcTests: (opts: {
    name: string;
    setupFunc: TestPresetEntryV4["testFunc"];
    verifyFuncDict?: {
        MD_ENHANCED_PREVIEW?: DendronASTDest | import("@dendronhq/common-test-utils").RunEngineTestFunctionV4<any> | undefined;
        MD_REGULAR?: DendronASTDest | import("@dendronhq/common-test-utils").RunEngineTestFunctionV4<any> | undefined;
        MD_DENDRON?: DendronASTDest | import("@dendronhq/common-test-utils").RunEngineTestFunctionV4<any> | undefined;
        HTML?: DendronASTDest | import("@dendronhq/common-test-utils").RunEngineTestFunctionV4<any> | undefined;
    } | undefined;
    preSetupHook?: import("@dendronhq/common-test-utils").PreSetupHookFunction<any> | undefined;
}) => any;
export declare const generateVerifyFunction: (opts: {
    target: DendronASTDest;
    exclude?: DendronASTDest[];
}) => any;
export declare const modifyNote: (opts: WorkspaceOpts, fname: string, cb: (note: NotePropsV2) => NotePropsV2) => Promise<void>;
export declare const processText: (opts: {
    text: string;
    proc: Processor;
}) => {
    proc: Processor<import("unified").Settings>;
    respParse: import("unist").Node;
    respProcess: import("vfile").VFile;
};
export declare const processNote: (opts: {
    fname: string;
    proc: Processor;
    wopts: WorkspaceOpts;
}) => {
    proc: Processor<import("unified").Settings>;
    respParse: import("unist").Node;
    respProcess: import("vfile").VFile;
};

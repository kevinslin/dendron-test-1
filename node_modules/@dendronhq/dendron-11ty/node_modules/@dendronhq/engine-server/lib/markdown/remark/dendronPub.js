"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dendronPub = void 0;
const common_all_1 = require("@dendronhq/common-all");
const lodash_1 = __importDefault(require("lodash"));
const unist_builder_1 = __importDefault(require("unist-builder"));
const unist_util_visit_1 = __importDefault(require("unist-util-visit"));
const site_1 = require("../../topics/site");
const types_1 = require("../types");
const utils_1 = require("../utils");
const noteRefs_1 = require("./noteRefs");
const noteRefsV2_1 = require("./noteRefsV2");
const utils_2 = require("./utils");
function plugin(opts) {
    const proc = this;
    const { dest, vault, fname, config, overrides } = utils_1.MDUtilsV4.getDendronData(proc);
    function transformer(tree, _file) {
        let root = tree;
        const { error, engine } = utils_1.MDUtilsV4.getEngineFromProc(proc);
        const insertTitle = !lodash_1.default.isUndefined(overrides === null || overrides === void 0 ? void 0 : overrides.insertTitle)
            ? overrides === null || overrides === void 0 ? void 0 : overrides.insertTitle : opts === null || opts === void 0 ? void 0 : opts.insertTitle;
        if (insertTitle && root.children) {
            if (!fname || !vault) {
                throw new common_all_1.DendronError({
                    msg: `no fname for node: ${JSON.stringify(tree)}`,
                });
            }
            const note = common_all_1.NoteUtilsV2.getNoteByFnameV4({
                fname,
                notes: engine.notes,
                vault: vault,
            });
            if (!note) {
                throw new common_all_1.DendronError({ msg: `no note found for ${fname}` });
            }
            const idx = lodash_1.default.findIndex(root.children, (ent) => ent.type !== "yaml");
            root.children.splice(idx, 0, unist_builder_1.default("heading", { depth: 1 }, [unist_builder_1.default("text", note.title)]));
        }
        unist_util_visit_1.default(tree, (node, _idx, parent) => {
            if (node.type === "wikiLink" &&
                dest !== types_1.DendronASTDest.MD_ENHANCED_PREVIEW) {
                let _node = node;
                let value = node.value;
                // we change this later
                let valueOrig = value;
                let canPublish = true;
                const data = _node.data;
                if (error) {
                    utils_2.addError(proc, error);
                }
                const copts = opts === null || opts === void 0 ? void 0 : opts.wikiLinkOpts;
                if (opts === null || opts === void 0 ? void 0 : opts.transformNoPublish) {
                    const notes = common_all_1.NoteUtilsV2.getNotesByFname({
                        fname: valueOrig,
                        notes: engine.notes,
                        vault,
                    });
                    const { error, note } = utils_2.getNoteOrError(notes, value);
                    if (error) {
                        value = "403";
                        utils_2.addError(proc, error);
                    }
                    else {
                        if (!note || !config) {
                            value = "403";
                            utils_2.addError(proc, new common_all_1.DendronError({ msg: "no note or config" }));
                        }
                        else {
                            const vaults = engine.vaultsv3;
                            const wsRoot = engine.wsRoot;
                            canPublish = site_1.SiteUtils.canPublish({
                                note,
                                config,
                                vaults,
                                wsRoot,
                            });
                            if (!canPublish) {
                                value = "403";
                            }
                        }
                    }
                }
                if ((copts === null || copts === void 0 ? void 0 : copts.useId) && canPublish) {
                    const notes = common_all_1.NoteUtilsV2.getNotesByFname({
                        fname: valueOrig,
                        notes: engine.notes,
                        vault,
                    });
                    const { error, note } = utils_2.getNoteOrError(notes, value);
                    if (error) {
                        utils_2.addError(proc, error);
                    }
                    else {
                        value = note.id;
                    }
                }
                const alias = data.alias ? data.alias : value;
                const href = `${(copts === null || copts === void 0 ? void 0 : copts.prefix) || ""}${value}.html${data.anchorHeader ? "#" + data.anchorHeader : ""}`;
                const exists = true;
                // for rehype
                //_node.value = newValue;
                _node.value = alias;
                _node.data = {
                    alias,
                    permalink: href,
                    exists: exists,
                    hName: "a",
                    hProperties: {
                        // className: classNames,
                        href,
                    },
                    hChildren: [
                        {
                            type: "text",
                            value: alias,
                        },
                    ],
                };
            }
            if (node.type === "refLink" &&
                dest !== types_1.DendronASTDest.MD_ENHANCED_PREVIEW) {
                const ndata = node.data;
                const copts = {
                    wikiLinkOpts: opts === null || opts === void 0 ? void 0 : opts.wikiLinkOpts,
                    prettyRefs: opts === null || opts === void 0 ? void 0 : opts.prettyRefs,
                };
                const { data } = noteRefs_1.convertNoteRefAST({
                    link: ndata.link,
                    proc,
                    compilerOpts: copts,
                });
                if (data) {
                    parent.children = data;
                }
            }
            if (node.type === "refLinkV2" &&
                dest !== types_1.DendronASTDest.MD_ENHANCED_PREVIEW) {
                const ndata = node.data;
                const copts = {
                    wikiLinkOpts: opts === null || opts === void 0 ? void 0 : opts.wikiLinkOpts,
                    prettyRefs: opts === null || opts === void 0 ? void 0 : opts.prettyRefs,
                };
                const { data } = noteRefsV2_1.convertNoteRefASTV2({
                    link: ndata.link,
                    proc,
                    compilerOpts: copts,
                });
                if (data) {
                    parent.children = data;
                }
            }
            if (node.type === "image" && dest === types_1.DendronASTDest.HTML) {
                let imageNode = node;
                if (opts === null || opts === void 0 ? void 0 : opts.assetsPrefix) {
                    imageNode.url =
                        "/" +
                            lodash_1.default.trim(opts.assetsPrefix, "/") +
                            "/" +
                            lodash_1.default.trim(imageNode.url, "/");
                }
            }
        });
        return tree;
    }
    return transformer;
}
exports.dendronPub = plugin;
//# sourceMappingURL=dendronPub.js.map